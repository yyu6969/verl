[
  "In his book \"Men of Mathematics\", Eric Temple Bell repeatedly makes the point that a student of mathematics must read the classics.\n\nMy question is what are some classic books in mathematics ( Dictionary definition : judged over a period of time to be of the highest quality and outstanding of its kind.) that can be used by a high school/undergraduate student to start the study of higher mathematics?\n\nSome subjects I would like reference in particular, otherwise state any book you consider a classic, are:\n1) Analysis\n2) Abstract algebra\n3) Linear Algebra\n4) Number theory\n5) Combinatorics and Graph theory, etc.",
  "My project can switch between languages. The items are stored in a database, and using $_GET['lang'] in the database gives back the correct items. For now, only English and French are in use, so it works with this code :\n\nif ($_GET['lang'] == 'fr' OR ($_GET['lang'] == 'en')) {\n$header = getTranslation('header', $_GET['lang']);\n$footer = getTranslation('footer', $_GET['lang']);\n} else {\nheader('Location: error.php');\n}\n\nWhat I'm looking for is some way to be prepared in case a language is added in the db. The code below approaches what I need (and obviously didn't work).\n\nwhile ($translations = $languagesList->fetch()) {\nif ($_GET['lang'] == $translations['code']) {\n$header = getTranslation('header', $_GET['lang']);\n$footer = getTranslation('footer', $_GET['lang']);\n} else {\nheader('Location: language.php');\n}\n}\n\nIs there any way to create a code that would generate multiple if conditions based on the number of languages in the db ?",
  "everyone!\nI am trying to render the exchange rates from a server to my page.\nHere is my React code:\n\n// React component code fetching exchange rates and rendering a button\n\nHow do I modify the 'render' part to see the rates in a column like it is on the server?\nThank very much to you in advance!",
  "I want to use UTC dates in my Node.js backend app, however, I need to be able to set time (hours and minutes) in a local/user-specified timezone.\n\nI am looking for a solution in either pure JS or using `dayjs`. I am not looking for a solution in `moment`.\n\nIt seemed like using `dayjs` I could solve this problem quite easily, however, I could not find a way to accomplish this.\n\nI can use UTC timezone by using `dayjs.utc()` or `dayjs.tz(someDate, 'Etc/UTC')`. But I still cannot define a timezone of time I want to set to a particular date.\n\nHere is a full function implementation attempting this and covering DST cases (summary only shown).\nLooking for improvements or better ways to handle edge cases like double hours during DST transitions."
]